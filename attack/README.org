#+title: Attack Lab solutions
#+OPTIONS: toc:nil ^:nil

* Intro

Before starting to do some hack, we must keep something in mind.

1. Both CTARGET and RTARGET read strings from standard input. So we should
   confirm the size of =buf= firstly, here it was shown as =BUFFER_SIZE=.

  #+begin_src C
unsigned getbuf()
{
    char buf[BUFFER_SIZE];
    Gets(buf);
    return 1;
}
  #+end_src

2. =BUFFER_SIZE= is known at compile time.

  #+begin_src asm
00000000004017a8 <getbuf>:
  4017a8:	48 83 ec 28          	sub    $0x28,%rsp # important!
  4017ac:	48 89 e7             	mov    %rsp,%rdi
  4017af:	e8 8c 02 00 00       	call   401a40 <Gets>
  4017b4:	b8 01 00 00 00       	mov    $0x1,%eax
  4017b9:	48 83 c4 28          	add    $0x28,%rsp
  4017bd:	c3                   	ret
  4017be:	90                   	nop
  4017bf:	90                   	nop
  #+end_src

3. Following instruction need to make sense of:

  #+begin_src asm
# call D
1. pushq %rip
2. jump D

# ret
1. popq %rip

# pushq S
1. subq $8, %rsp
2. movq S, (%rsp)

# popq S
1. movq (%rsp), S
2. addq $8, %rsp
  #+end_src


* Part 1: Code Injection Attacks

After disassembling the =ctarget.c=, we got enough information about
those functions, like =touch1=, =touch2=, =touch3=.

** Level 1

For Phase 1, you will not inject new code. Instead, your exploit string will redirect the program to execute
an existing procedure.
Function getbuf is called within CTARGET by a function =test= having the following C code:

#+begin_src C
void test()
{
    int val;
    val = getbuf();
    printf("No exploit. Getbuf returned 0x%x\n", val);
}
#+end_src

#+begin_src asm
00000000004017c0 <touch1>:
  4017c0:	48 83 ec 08          	sub    $0x8,%rsp
  4017c4:	c7 05 0e 2d 20 00 01 	movl   $0x1,0x202d0e(%rip)        # 6044dc <vlevel>
  4017cb:	00 00 00 
  4017ce:	bf c5 30 40 00       	mov    $0x4030c5,%edi
  4017d3:	e8 e8 f4 ff ff       	call   400cc0 <puts@plt>
  4017d8:	bf 01 00 00 00       	mov    $0x1,%edi
  4017dd:	e8 ab 04 00 00       	call   401c8d <validate>
  4017e2:	bf 00 00 00 00       	mov    $0x0,%edi
  4017e7:	e8 54 f6 ff ff       	call   400e40 <exit@plt>
#+end_src

Note: =touch1= does NOT need any parameter.
